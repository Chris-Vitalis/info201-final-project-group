custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
simp_name <- simp("mrlaw98")
library(dplyr)
library(plotly)
library(devtools)
library(shiny)
source("./playlist_plot.R")
# Creates a font family to use
fonts <- list(
sans = "Helvetica",
mono = "Consolas",
`Times New Roman` = "DejaVu Serif"
)
# Creates a visual table using Spotify branding colors
# and the columns can be manually moved
createTable <- function(df, tableHeight = 50){
nms <- lapply(names(df), function(x){
return(paste0("<b>", x, "</b>"))
})
nms <- append(nms, "<b>Top #</b>", after = 0)
headerValues <- lapply(nms, function(x){return(list(x))})
# Cell Values
names(df) <- NULL
cellValues <- apply(df, 2, function(x){return(list(x))})
cellValues <- lapply(cellValues, function(x){return(unlist(x))})
cellValues <- append(cellValues, list(rownames(df)), after = 0)
# Create the list to pass to plot_ly()
header <- list(
values = headerValues,
# Formatting
line = list(color = "#b3b3b3"),
align = c("left", rep("center", ncol(df))),
font = list(color = "#1db954", size = 16),
fill = list(color = "#212121")
)
cells <- list(
values = cellValues,
# Formatting
line = list(color = '#b3b3b3'),
align = c('left', rep('right', ncol(df))),
font = list(color = c('#1db954', rep("#ffffff", ncol(df))), size = 12),
fill = list(color = c("#212121", rep("#303030", ncol(df)))),
height = tableHeight
)
p <- plot_ly(
type = "table",
header = header,
cells = cells,
width = 1200,
height = 1600) %>%
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
return(p)
}
p <- createTable(simp_name)
source("playlist_plot.R")
shinyServer(function(input, output) {
output$text <- renderPrint({input$username})
})
# Function for the second tab of website
source("alvin-analysis.R")
df <- read.csv("data/artist_df.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
output$text <- renderPrint({input$username})
output$plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence)
return(custom_plot(data, input$x_var, input$y_var))
})
output$pop_plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence,
track_popularity)
return(popularity_plot(data, input$pop_var))
})
})
library(dplyr)
library(plotly)
library(devtools)
library(shiny)
source("playlist_plot.R")
# Creates a font family to use
fonts <- list(
sans = "Helvetica",
mono = "Consolas",
`Times New Roman` = "DejaVu Serif"
)
# Creates a visual table using Spotify branding colors
# and the columns can be manually moved
createTable <- function(df, tableHeight = 50){
nms <- lapply(names(df), function(x){
return(paste0("<b>", x, "</b>"))
})
nms <- append(nms, "<b>Top #</b>", after = 0)
headerValues <- lapply(nms, function(x){return(list(x))})
# Cell Values
names(df) <- NULL
cellValues <- apply(df, 2, function(x){return(list(x))})
cellValues <- lapply(cellValues, function(x){return(unlist(x))})
cellValues <- append(cellValues, list(rownames(df)), after = 0)
# Create the list to pass to plot_ly()
header <- list(
values = headerValues,
# Formatting
line = list(color = "#b3b3b3"),
align = c("left", rep("center", ncol(df))),
font = list(color = "#1db954", size = 16),
fill = list(color = "#212121")
)
cells <- list(
values = cellValues,
# Formatting
line = list(color = '#b3b3b3'),
align = c('left', rep('right', ncol(df))),
font = list(color = c('#1db954', rep("#ffffff", ncol(df))), size = 12),
fill = list(color = c("#212121", rep("#303030", ncol(df)))),
height = tableHeight
)
p <- plot_ly(
type = "table",
header = header,
cells = cells,
width = 1200,
height = 1600) %>%
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
return(p)
}
p <- createTable(simp_name)
shinyServer(function(input, output) {
output$text <- renderPrint({input$username})
})
# Function for the second tab of website
source("alvin-analysis.R")
df <- read.csv("data/artist_df.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
output$text <- renderPrint({input$username})
output$plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence)
return(custom_plot(data, input$x_var, input$y_var))
})
output$pop_plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence,
track_popularity)
return(popularity_plot(data, input$pop_var))
})
})
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
simp_name <- simp("mrlaw98")
runApp()
# ui.R
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source("server.R")
source("playlist_plot.R")
source("alvin-analysis.R")
shinyUI(navbarPage(
theme = shinytheme("slate"),
"MÜD",
# Create a tab panel for your map
tabPanel(
"Playlist",
titlePanel("Custom Spotify MÜD Playlist"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
textInput("username",
label = h3("What is your Spotify Username?"),
value = "Username..."
)
,
radioButtons("playlist_type",
label = h3("What are you in the mood for?"),
choices = list(
"Dancing" = "dance",
"Chilling" = "chill",
"Simping" = "simp"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("playlist_table")
)
)
),
tabPanel(
"Artist",
titlePanel("Show trends in artists"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput("artist",
label = "Which artist?",
choices = unique(df$artist)
)
,
radioButtons("x_var",
label = h3("Choose the x-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("y_var",
label = h3("Choose the y-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("pop_var",
label = h3("Choose the variable"),
choices = list(
"danceability", "energy", "liveness",
"happiness" = "valence"
)
)
),
mainPanel(
plotlyOutput("plot"),
plotlyOutput("pop_plot")
)
)
)
))
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
simp_name <- simp("mrlaw98")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
source("key.R")
library(lubridate)
library(dplyr)
# C
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
# ui.R
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source("server.R")
source("playlist_plot.R")
source("alvin-analysis.R")
shinyUI(navbarPage(
theme = shinytheme("slate"),
"MÜD",
# Create a tab panel for your map
tabPanel(
"Playlist",
titlePanel("Custom Spotify MÜD Playlist"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
textInput("username",
label = h3("What is your Spotify Username?"),
value = "Username..."
)
,
radioButtons("playlist_type",
label = h3("What are you in the mood for?"),
choices = list(
"Dancing" = "dance",
"Chilling" = "chill",
"Simping" = "simp"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("playlist_table")
)
)
),
tabPanel(
"Artist",
titlePanel("Show trends in artists"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput("artist",
label = "Which artist?",
choices = unique(df$artist)
)
,
radioButtons("x_var",
label = h3("Choose the x-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("y_var",
label = h3("Choose the y-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("pop_var",
label = h3("Choose the variable"),
choices = list(
"danceability", "energy", "liveness",
"happiness" = "valence"
)
)
),
mainPanel(
plotlyOutput("plot"),
plotlyOutput("pop_plot")
)
)
)
))
runApp()
runApp()
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
runApp()
