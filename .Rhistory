return(custom_simp)
}
simp_name <- simp("mrlaw98")
runApp()
# ui.R
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source("server.R")
source("playlist_plot.R")
source("alvin-analysis.R")
shinyUI(navbarPage(
theme = shinytheme("slate"),
"MÜD",
# Create a tab panel for your map
tabPanel(
"Playlist",
titlePanel("Custom Spotify MÜD Playlist"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
textInput("username",
label = h3("What is your Spotify Username?"),
value = "Username..."
)
,
radioButtons("playlist_type",
label = h3("What are you in the mood for?"),
choices = list(
"Dancing" = "dance",
"Chilling" = "chill",
"Simping" = "simp"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("playlist_table")
)
)
),
tabPanel(
"Artist",
titlePanel("Show trends in artists"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput("artist",
label = "Which artist?",
choices = unique(df$artist)
)
,
radioButtons("x_var",
label = h3("Choose the x-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("y_var",
label = h3("Choose the y-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("pop_var",
label = h3("Choose the variable"),
choices = list(
"danceability", "energy", "liveness",
"happiness" = "valence"
)
)
),
mainPanel(
plotlyOutput("plot"),
plotlyOutput("pop_plot")
)
)
)
))
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
simp_name <- simp("mrlaw98")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
source("key.R")
library(lubridate)
library(dplyr)
# C
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
# ui.R
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source("server.R")
source("playlist_plot.R")
source("alvin-analysis.R")
shinyUI(navbarPage(
theme = shinytheme("slate"),
"MÜD",
# Create a tab panel for your map
tabPanel(
"Playlist",
titlePanel("Custom Spotify MÜD Playlist"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
textInput("username",
label = h3("What is your Spotify Username?"),
value = "Username..."
)
,
radioButtons("playlist_type",
label = h3("What are you in the mood for?"),
choices = list(
"Dancing" = "dance",
"Chilling" = "chill",
"Simping" = "simp"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("playlist_table")
)
)
),
tabPanel(
"Artist",
titlePanel("Show trends in artists"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput("artist",
label = "Which artist?",
choices = unique(df$artist)
)
,
radioButtons("x_var",
label = h3("Choose the x-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("y_var",
label = h3("Choose the y-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("pop_var",
label = h3("Choose the variable"),
choices = list(
"danceability", "energy", "liveness",
"happiness" = "valence"
)
)
),
mainPanel(
plotlyOutput("plot"),
plotlyOutput("pop_plot")
)
)
)
))
runApp()
runApp()
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
runApp()
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
shiny::runApp()
runApp()
??tableHeight
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??colnames
??colnames()
runApp()
runApp()
colnames(cars)
View(cards)
View(cars)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lintr:::addin_lint()
runApp()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint_package()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# ui.R
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source("server.R")
source("playlist_plot.R")
source("alvin-analysis.R")
shinyUI(navbarPage(
#theme = shinytheme("slate"),
"MÜD",
# Create a tab panel for your map
tabPanel(
"Playlist",
titlePanel(h1("Custom Spotify MÜD Playlist")),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
textInput("username",
label = h3("What is Your Spotify Username?"),
value = "barackobama"
),
radioButtons("playlist_type",
label = h2("What Are You in the Mood For?"),
choices = list(
"Dancing" = "dance",
"Chilling" = "chill",
"Simping" = "simp"
)
)
),
# Main panel: display plotly map
mainPanel(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
plotlyOutput("playlist_table")
)
)
),
tabPanel(
"Artist",
titlePanel(h1("Show Trends in Artists")),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput("artist",
label = "Which Artist?",
choices = unique(df$artist)
),
radioButtons("x_var",
label = h3("Choose the X-Variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
),
radioButtons("y_var",
label = h2("Choose the Y-Variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
),
mainPanel(
plotlyOutput("plot")
)
)
),
tabPanel(
"Popularity",
titlePanel(h1("Show Relationships with Track Popularity")),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput("artist2",
label = "Which Artist?",
choices = unique(df$artist)
)
,
radioButtons("pop_var",
label = h2("Choose the variable"),
choices = list(
"danceability", "energy", "liveness",
"happiness" = "valence"
)
)
),
mainPanel(
plotlyOutput("pop_plot")
)
)
)
))
runApp()
runApp()
lintr:::addin_lint()
lintr:::addin_lint()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
