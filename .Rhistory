select(name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
playlist_name <-get_user_audio_features("mrlaw98")
spotfiy <- playlist_features_parse <- function(name){
#playlist_name <-get_user_audio_features(name)
name %>%
select(name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_dance <- name %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
name <-get_user_audio_features("mrlaw98")
spotfiy <- playlist_features_parse <- function(name){
#playlist_name <-get_user_audio_features(name)
name %>%
select(name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_dance <- name %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
View(name)
View(spotfiy())
name <-get_user_audio_features("mrlaw98")
playlist_features_parse <- function(name){
#playlist_name <-get_user_audio_features(name)
name %>%
select(name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_dance <- name %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# mrlaw98
sname <-get_user_audio_features("mrlaw98")
playlist_features_parse <- function(name){
#playlist_name <-get_user_audio_features(name)
name %>%
select(name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_dance <- name %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
View(playlist_features_parse(sname))
View(custom_dance)
playlist_features_parse <- function(name){
playlist_name <-get_user_audio_features(name)
custom_dance <- name %>%
select(name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
end <- playlist_features_parse("mrlaw98")
View(end)
source("key.R")
library(lubridate)
library(dplyr)
dance <- function(name){
playlist_info <-get_user_audio_features(name)
playlist_info <- playlist_info %>%
select(playlist_name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_dance <- playlist_info %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
chill <- function(name){
playlist_info <-get_user_audio_features(name)
playlist_info <- playlist_info %>%
select(playlist_name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_chill <- playlist_info %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
simp <- function(name){
playlist_info <-get_user_audio_features(name)
playlist_info <- playlist_info %>%
select(playlist_name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_simp <- playlist_info %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
playlist_info <-get_user_audio_features(name) %>%
select(playlist_name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
# playlist_info <- playlist_info %>%
# select(playlist_name, track_name, artist_name, album_name, track_popularity,
#        energy, key, loudness, mode, speechiness, acousticness,
#        instrumentalness, liveness, valence, tempo, duration_ms,
#        time_signature, key_mode, danceability)
custom_dance <- playlist_info %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
View(dance("mrlaw98"))
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
playlist_info <-get_user_audio_features(name) %>%
select(playlist_name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_dance <- playlist_info %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
playlist_info <-get_user_audio_features(name) %>%
select(playlist_name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_chill <- playlist_info %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
playlist_info <-get_user_audio_features(name) %>%
select(playlist_name, track_name, artist_name, album_name, track_popularity,
energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, duration_ms,
time_signature, key_mode, danceability)
custom_simp <- playlist_info %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
View(simp("mrlaw98"))
simp <- function(name){
# playlist_info <-get_user_audio_features(name) %>%
#   select(playlist_name, track_name, artist_name, album_name, track_popularity,
#          energy, key, loudness, mode, speechiness, acousticness,
#          instrumentalness, liveness, valence, tempo, duration_ms,
#          time_signature, key_mode, danceability)
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
View(simp("mrlaw98"))
source("key.R")
library(lubridate)
library(dplyr)
# Creates a table of playlists that is "danceable"
dance <- function(name){
custom_dance <- get_user_audio_features(name) %>%
filter(danceability > .7) %>%
filter(energy > .5) %>%
select(playlist_name, track_name, artist_name, album_name, danceability,
energy) %>%
arrange(-danceability)
return(custom_dance)
}
# Creates a table of "chill" playlists
chill <- function(name){
custom_chill <- get_user_audio_features(name) %>%
filter(energy < .5) %>%
filter(acousticness > .5) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, acousticness) %>%
arrange(energy)
return(custom_chill)
}
# Creates a table of "simp" playlists
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
library(devtools)
library(dplyr)
library(plotly)
library(devtools)
setwd("~/Desktop/INFO/info201-final-project-group")
source("./playlist_plot.R")
simp_name <- simp("mrlaw98")
simp <- function(name){
custom_simp <- get_user_audio_features(name) %>%
filter(valence < .3) %>%
filter(energy < .3) %>%
select(playlist_name, track_name, artist_name, album_name,
energy, valence) %>%
arrange(valence)
return(custom_simp)
}
simp("mrlaw98")
simp_name <- simp("mrlaw98")
colnames(simp_name)
library(dplyr)
library(plotly)
library(devtools)
source("./playlist_plot.R")
# p <- plot_ly(
#   type = 'table',
#
#   header = colnames(simp_name),
#
#   line = list(color = "#DFE8F3"),
#   align = c('left'),
#   font = list(color = c('#506784', '#506784', '#506784', '#506784', '#506784',
#                         '#506784'), size = 14)
# )
headerValues <- list()
for (i in (0:ncol(simp_name))) {
name <- names(simp_name)[i]
headerValues[i] <- name
}
headerValues <- append(headerValues, "<b>Songs</b>", after = 0)
cellValues <- list()
for (i in (0:ncol(simp_name))) {
row <- simp_name[i]
cellValues[i] <- row
}
cellValues <- append(cellValues, list(rownames(simp_name)), after = 0)
p <- plot_ly(
type = "table",
header = list(
values = headerValues,
align = c("left", rep("center", ncol(simp_name))),
line = list(width = 1, color = "black"),
fill = list(color = "rgb(235, 100, 230)"),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = cellValues,
align = c("left", rep("center", ncol(simp_name))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
)
)
p
View(p)
p
library(dplyr)
library(plotly)
library(devtools)
source("./playlist_plot.R")
# p <- plot_ly(
#   type = 'table',
#
#   header = colnames(simp_name),
#
#   line = list(color = "#DFE8F3"),
#   align = c('left'),
#   font = list(color = c('#506784', '#506784', '#506784', '#506784', '#506784',
#                         '#506784'), size = 14)
# )
headerValues <- list()
for (i in (0:ncol(simp_name))) {
name <- names(simp_name)[i]
headerValues[i] <- name
}
headerValues <- append(headerValues, "<b>Songs</b>", after = 0)
cellValues <- list()
for (i in (0:ncol(simp_name))) {
row <- simp_name[i]
cellValues[i] <- row
}
cellValues <- append(cellValues, list(rownames(simp_name)), after = 0)
p <- plot_ly(
type = "table",
header = list(
values = headerValues,
align = c("left", rep("center", ncol(simp_name))),
line = list(width = 1, color = "black"),
fill = list(color = "rgb(235, 100, 230)"),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = cellValues,
align = c("left", rep("center", ncol(simp_name))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
)
)
p
devtools::install_github("ropensci/plotly)
)
>
""
)
ckear
clear
)
>
]
}
"
devtools::install_github("ropensci/plotly")
shiny::runApp()
library(dplyr)
library(plotly)
library(devtools)
library(dplyr)
library(plotly)
library(devtools)
source("./playlist_plot.R")
createTable <- function(df, tableHeight = 50){
nms <- lapply(names(df), function(x){
return(paste0("<b>", x, "</b>"))
})
nms <- append(nms, "<b>Rows</b>", after = 0)
headerValues <- lapply(n,s, function(x){return(list(x))})
# Cell Values
names(df) <- NULL
cellValues <- apply(df, 2, function(x){return(list(x))})
cellValues <- lapply(cellValues, function(x){return(unlist(x))})
cellValues <- append(cellValues, list(rownames(df)), after = 0)
#Create the list to pass to plot_ly()
header <- list(
values = headerValues,
# Formatting
line = list(color = "#DFE8F3"),
align = c('left', rep('center', ncol(df))),
font = list(color = '#ffffff', size = 16),
fill = list(color = '#999999')
)
cells <- list(
values = cellValues,
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', rep('right', ncol(df))),
font = list(color = c('#262626'), size = 14),
fill = list(color = c("#d9d9d9", rep("#ffe6cc", ncol(df)))),
height = tableHeight
)
p <- plot_ly(
type = "table",
header = header,
cells = cells,
width = 1200,
height = 1600) %>%
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
return(p)
}
p <- createTable(simp_name)
p
createTable <- function(df, tableHeight = 50){
nms <- lapply(names(df), function(x){
return(paste0("<b>", x, "</b>"))
})
nms <- append(nms, "<b>Rows</b>", after = 0)
headerValues <- lapply(n,s, function(x){return(list(x))})
# Cell Values
names(df) <- NULL
cellValues <- apply(df, 2, function(x){return(list(x))})
cellValues <- lapply(cellValues, function(x){return(unlist(x))})
cellValues <- append(cellValues, list(rownames(df)), after = 0)
#Create the list to pass to plot_ly()
header <- list(
values = headerValues,
# Formatting
line = list(color = "#DFE8F3"),
align = c('left', rep('center', ncol(df))),
font = list(color = '#ffffff', size = 16),
fill = list(color = '#999999')
)
cells <- list(
values = cellValues,
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', rep('right', ncol(df))),
font = list(color = c('#262626'), size = 14),
fill = list(color = c("#d9d9d9", rep("#ffe6cc", ncol(df)))),
height = tableHeight
)
p <- plot_ly(
type = "table",
header = header,
cells = cells,
width = 1200,
height = 1600) %>%
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
return(p)
}
p <- createTable(simp_name)
p <- createTable(simp_name)
createTable <- function(df, tableHeight = 50){
nms <- lapply(names(df), function(x){
return(paste0("<b>", x, "</b>"))
})
nms <- append(nms, "<b>Rows</b>", after = 0)
headerValues <- lapply(nms, function(x){return(list(x))})
# Cell Values
names(df) <- NULL
cellValues <- apply(df, 2, function(x){return(list(x))})
cellValues <- lapply(cellValues, function(x){return(unlist(x))})
cellValues <- append(cellValues, list(rownames(df)), after = 0)
#Create the list to pass to plot_ly()
header <- list(
values = headerValues,
# Formatting
line = list(color = "#DFE8F3"),
align = c('left', rep('center', ncol(df))),
font = list(color = '#ffffff', size = 16),
fill = list(color = '#999999')
)
cells <- list(
values = cellValues,
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', rep('right', ncol(df))),
font = list(color = c('#262626'), size = 14),
fill = list(color = c("#d9d9d9", rep("#ffe6cc", ncol(df)))),
height = tableHeight
)
p <- plot_ly(
type = "table",
header = header,
cells = cells,
width = 1200,
height = 1600) %>%
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
return(p)
}
p <- createTable(simp_name)
library(plotly)
